// Generated by CoffeeScript 1.3.3
(function() {
  var NavigationDataSource,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  NavigationDataSource = (function(_super) {

    __extends(NavigationDataSource, _super);

    function NavigationDataSource(grid, navigationController, level, nodeId, parent, position) {
      var _this = this;
      this.grid = grid;
      this.navigationController = navigationController;
      NavigationDataSource.__super__.constructor.call(this, this.grid, level, nodeId, parent, position);
      this.labels = "Start,ZurÃ¼ck,Alarm".split(",");
      this.actions = [
        function() {
          return _this.navigationController.popToRoot();
        }, function() {
          if (_this.navigationController.count() > 1) {
            return _this.navigationController.pop();
          }
        }
      ];
    }

    NavigationDataSource.prototype.colorForCell = function(x, y) {
      if (x === 0) {
        return "rgba(240,240,250,0.8)";
      } else {
        return NavigationDataSource.__super__.colorForCell.apply(this, arguments);
      }
    };

    NavigationDataSource.prototype.labelForCell = function(x, y) {
      if (x !== 0) {
        return NavigationDataSource.__super__.labelForCell.apply(this, arguments);
      } else {
        if (y === 1 && this.navigationController.count() < 2) {
          return "()";
        }
        return this.labels[y];
      }
    };

    NavigationDataSource.prototype.enterCell = function(x, y) {
      if (x === 0) {
        console.log("entering menu cell " + x + "/" + y);
        return this.actions[y]();
      } else {
        return NavigationDataSource.__super__.enterCell.apply(this, arguments);
      }
    };

    NavigationDataSource.prototype.cellForPosition = function(x, y) {
      var _this = this;
      if (x !== 0) {
        return NavigationDataSource.__super__.cellForPosition.apply(this, arguments);
      }
      return $("<td>").append($("<div>").addClass("label").html(this.labelForCell(x, y))).css("background-color", this.colorForCell(x, y)).click(function() {
        return _this.enterCell(x, y);
      });
    };

    return NavigationDataSource;

  })(DataSource);

  window.NavigationDataSource = NavigationDataSource;

}).call(this);
