// Generated by CoffeeScript 1.3.3
(function() {
  var CellFactory;

  CellFactory = (function() {

    function CellFactory(delegate) {
      this.delegate = delegate;
    }

    CellFactory.prototype.makeLabel = function(text) {
      var self;
      self = this;
      return $("<div>").html(text).addClass("label").click(function() {
        var label, parent;
        label = $(this);
        parent = $(this).parent();
        $("<input>").val(label.html()).addClass("label").click(function() {
          return false;
        }).keypress(function(e) {
          if (e.keyCode === 13) {
            e.preventDefault();
            e.stopPropagation();
            $(this).blur();
            return false;
          }
        }).blur(function() {
          var newText, _ref;
          newText = $(this).val();
          if ((_ref = self.delegate) != null) {
            _ref.labelTextChanged(parent, newText);
          }
          $(this).remove();
          label.html(newText);
          return label.show();
        }).insertAfter(label);
        parent.find("input").focus();
        label.hide();
        return false;
      });
    };

    CellFactory.prototype.setBackgroundImage = function(cell, dataUri) {
      return cell.css("background-image", "url(" + dataUri + ")");
    };

    CellFactory.prototype.setIcon = function(image, dataUri) {
      image.attr("src", dataUri);
      return image.show();
    };

    CellFactory.prototype.handleImage = function(image, cell, dataUri) {
      var h, w;
      image.attr("src", dataUri);
      w = image.width();
      h = image.height();
      console.log("image dropped: " + (image.width()) + "x" + (image.height()));
      if (w > 256 || h > 128) {
        this.setBackgroundImage(cell, dataUri);
        image.hide();
        if (this.delegate) {
          return this.delegate.imageChanged(cell, "background", dataUri);
        }
      } else {
        if (this.delegate) {
          this.delegate.imageChanged(cell, "icon", dataUri);
        }
        return image.show();
      }
    };

    CellFactory.prototype.makeIconBar = function(data) {
      return $("<div>").addClass("iconbar").append($("<img>").attr("src", "icons/08-chat@2x.png")).append($("<img>").attr("src", "icons/65-note@2x.png"));
    };

    CellFactory.prototype.makeCell = function(data, color) {
      var cell, image, label, self, _ref;
      label = (_ref = data.label) != null ? _ref : "n/a";
      image = $("<img>");
      self = this;
      cell = $("<td>").append(this.makeIconBar(data)).append(this.makeLabel(label)).append(image).css("background-color", color);
      cell.bind("dragenter", function(evt) {
        $(this).addClass("dragTarget");
        evt.stopPropagation();
        evt.preventDefault();
        return true;
      });
      cell.bind("dragleave", function(evt) {
        $(this).removeClass("dragTarget");
        evt.stopPropagation();
        evt.preventDefault();
        return true;
      });
      cell.bind("dragover", function(evt) {
        evt.stopPropagation();
        return evt.preventDefault();
      });
      cell.bind("drop", function(evt) {
        var files;
        $(this).removeClass("dragTarget");
        cell = $(this);
        evt.stopPropagation();
        evt.preventDefault();
        files = evt.originalEvent.dataTransfer.files;
        return _(files).each(function(file) {
          var reader;
          console.log("type", file.type);
          console.log("path", file.mozFullPath);
          reader = new FileReader();
          reader.onloadend = function() {
            var dataUri;
            dataUri = reader.result;
            return self.handleImage(image, cell, dataUri);
          };
          return reader.readAsDataURL(file);
        });
      });
      if ("background" in data) {
        this.setBackgroundImage(cell, data.background);
      }
      if ("icon" in data) {
        this.setIcon(image, data.icon);
      }
      return cell;
    };

    return CellFactory;

  })();

  window.CellFactory = CellFactory;

}).call(this);
