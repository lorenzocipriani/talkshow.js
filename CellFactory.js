// Generated by CoffeeScript 1.3.3
(function() {
  var CellFactory,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CellFactory = (function() {

    function CellFactory(delegate) {
      this.delegate = delegate;
    }

    CellFactory.prototype.makeLabel = function(text) {
      var self;
      self = this;
      return $("<div>").html(text).addClass('label').click(function() {
        var label, parent;
        label = $(this);
        parent = label.parent();
        KeyboardInput.get().pushModalKeyHandler(null);
        $("<input>").val(label.html()).addClass("label").click(function() {
          return false;
        }).keypress(function(e) {
          if (e.keyCode === 13) {
            e.preventDefault();
            e.stopPropagation();
            $(this).blur();
            return false;
          }
        }).blur(function() {
          var newText, _ref;
          newText = $(this).val();
          if ((_ref = self.delegate) != null) {
            _ref.labelTextChanged(parent, newText);
          }
          $(this).remove();
          label.html(newText);
          label.show();
          return KeyboardInput.get().popModalKeyHandler();
        }).insertAfter(label);
        parent.find('input').focus();
        label.hide();
        return false;
      });
    };

    CellFactory.prototype.setContent = function(cell, aspect, dataUri) {
      var audio, icon;
      if (aspect === 'backgroundImage') {
        aspect = 'background';
      }
      icon = cell.find('.icon');
      audio = cell.find('audio');
      cell.find(".iconbar ." + aspect)[dataUri ? 'show' : 'hide']();
      switch (aspect) {
        case 'background':
          return cell.css('background-image', dataUri ? "url(" + dataUri + ")" : 'none');
        case 'icon':
          if (dataUri) {
            icon.attr('src', dataUri);
            return icon.show();
          } else {
            icon.attr('src', '');
            return icon.hide();
          }
          break;
        case 'navigationSound':
          return audio.attr('src', dataUri || '');
      }
    };

    CellFactory.prototype.handleDrop = function(cell, dataUri, mimeType) {
      var majorType, self;
      majorType = mimeType.split("/")[0];
      console.log("handleDrop", majorType);
      switch (majorType) {
        case 'audio':
          self = this;
          $(".soundDropped .dialog").show();
          return $(".dialog .choice").unbind("click").click(function() {
            var aspect, _ref;
            $(".soundDropped .dialog").hide();
            aspect = $(this).attr("type");
            self.setContent(cell, aspect, dataUri);
            if ((_ref = self.delegate) != null) {
              _ref.soundChanged(cell, aspect, dataUri);
            }
            if (aspect === 'navigationSound') {
              return cell.find('audio')[0].play();
            }
          });
        case 'image':
          self = this;
          $('.imageDropped .dialog').show();
          return $('.dialog .choice').unbind('click').click(function() {
            var aspect, _ref;
            $('.imageDropped .dialog').hide();
            aspect = $(this).attr('type');
            self.setContent(cell, aspect, dataUri);
            return (_ref = self.delegate) != null ? _ref.imageChanged(cell, aspect, dataUri) : void 0;
          });
      }
    };

    CellFactory.prototype.makeIconBar = function(data) {
      var iconBar, makeIconBarItem, self;
      iconBar = $('<div>').addClass('iconbar');
      self = this;
      makeIconBarItem = function(aspect, imageURL) {
        return $('<img>').hide().addClass(aspect).attr('src', imageURL).click(function() {
          var cell, dialog;
          cell = iconBar.closest("td");
          dialog = $(".delete ." + aspect + " .dialog");
          dialog.show();
          dialog.find('.choice').unbind('click').click(function() {
            var _ref;
            dialog.hide();
            switch ($(this).attr('type')) {
              case 'delete':
                if (__indexOf.call('photo icon background'.split(' '), aspect) >= 0) {
                  if ((_ref = self.delegate) != null) {
                    _ref.imageChanged(cell, aspect, null);
                  }
                }
                cell = iconBar.closest('td');
                return self.setContent(cell, aspect, null);
            }
          });
          return false;
        });
      };
      iconBar.append(makeIconBarItem('photo', 'icons/86-camera@2x.png'));
      iconBar.append(makeIconBarItem('navigationSound', 'icons/08-chat@2x.png'));
      return iconBar.append(makeIconBarItem('sound', 'icons/65-note@2x.png'));
    };

    CellFactory.prototype.makeCell = function(data, color) {
      var aspect, audio, cell, image, label, self, _i, _len, _ref, _ref1;
      label = (_ref = data.label) != null ? _ref : 'n/a';
      image = $('<img>').addClass("icon");
      audio = $('<audio>');
      self = this;
      cell = $('<td>').append(this.makeIconBar(data)).append(audio).append(image).append(this.makeLabel(label)).css('background-color', color);
      cell.bind('dragenter', function(evt) {
        $(this).addClass('dragTarget');
        evt.stopPropagation();
        evt.preventDefault();
        return true;
      });
      cell.bind('dragleave', function(evt) {
        $(this).removeClass('dragTarget');
        evt.stopPropagation();
        evt.preventDefault();
        return true;
      });
      cell.bind('dragover', function(evt) {
        evt.stopPropagation();
        return evt.preventDefault();
      });
      cell.bind('drop', function(evt) {
        var files;
        $(this).removeClass('dragTarget');
        cell = $(this);
        evt.stopPropagation();
        evt.preventDefault();
        files = evt.originalEvent.dataTransfer.files;
        return _(files).each(function(file) {
          var reader;
          console.log("type: " + file.type);
          console.log("path: " + file.mozFullPath);
          reader = new FileReader();
          reader.onloadend = function() {
            var dataUri;
            dataUri = reader.result;
            return self.handleDrop(cell, dataUri, file.type);
          };
          return reader.readAsDataURL(file);
        });
      });
      _ref1 = ['background', 'icon', 'sound', 'photo', 'navigationSound'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        aspect = _ref1[_i];
        if (aspect in data) {
          this.setContent(cell, aspect, data[aspect]);
        }
      }
      return cell;
    };

    return CellFactory;

  })();

  window.CellFactory = CellFactory;

}).call(this);
