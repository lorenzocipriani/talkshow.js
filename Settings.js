// Generated by CoffeeScript 1.3.3
(function() {
  var Settings,
    __hasProp = {}.hasOwnProperty;

  Settings = (function() {

    function Settings(storage, cb) {
      var self,
        _this = this;
      this.storage = storage;
      $("#settings input.preference").focus(function() {
        return $(this).css("background-color", "yellow");
      });
      self = this;
      $("#settings input.preference").change(function() {
        var _this = this;
        return self.savePreferences(function(err) {
          if (err != null) {
            return console.log(err);
          } else {
            return $(_this).css("background-color", "inherit");
          }
        });
      });
      this.load(function(err) {
        if ($("#colors li").length === 0) {
          _this.addDefaultColors();
          _this.insertAddButton();
          return _this.saveColors(function(err, res) {
            return cb(null, _this);
          });
        } else {
          _this.insertAddButton();
          return cb(null, _this);
        }
      });
    }

    Settings.prototype.insertAddButton = function() {
      var _this = this;
      return $("#colors").append($("<li>").addClass("addButton").html("+").click(function() {
        $("<li>").css("background-color", "rgb(0,0,0)").insertBefore("#colors .addButton");
        return _this.saveColors(function(err, res) {
          if (err != null) {
            return console.log(err);
          }
        });
      }));
    };

    Settings.prototype.CSSColorFromArray = function(c) {
      return "rgb(" + c[0] + "," + c[1] + "," + c[2] + ")";
    };

    Settings.prototype.addDefaultColors = function() {
      var c, colors, _i, _len, _results;
      console.log("adding default colors");
      colors = [[255, 255, 127], [127, 127, 255], [255, 40, 40]];
      _results = [];
      for (_i = 0, _len = colors.length; _i < _len; _i++) {
        c = colors[_i];
        _results.push($("#colors").append($("<li>").css("background-color", this.CSSColorFromArray(c))));
      }
      return _results;
    };

    Settings.prototype.saveColors = function(cb) {
      var colorJSON, element, s;
      colorJSON = "[" + ((function() {
        var _i, _len, _ref, _results;
        _ref = $("#colors li").not(".addButton");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          s = $(element).css("background-color");
          s = s.replace("rgb(", "[");
          s = s.replace("rgba(", "[");
          _results.push(s = s.replace(")", "]"));
        }
        return _results;
      })()).join(",") + "]";
      return this.storage.save("colors", {
        rgb: JSON.parse(colorJSON)
      }, cb);
    };

    Settings.prototype.load = function(cb) {
      var _this = this;
      return async.parallel([
        function(cb) {
          return _this.loadColors(cb);
        }, function(cb) {
          return _this.loadPreferences(cb);
        }
      ], cb);
    };

    Settings.prototype.loadPreferences = function(cb) {
      var _this = this;
      return this.storage.get("preferences", function(err, prefs) {
        var el, key, value;
        if (prefs != null) {
          for (key in prefs) {
            if (!__hasProp.call(prefs, key)) continue;
            value = prefs[key];
            el = $("input#" + key + ".preference");
            if (el != null) {
              $(el).attr('value', value);
              console.log(el, value);
            }
          }
        }
        return cb(null, prefs);
      });
    };

    Settings.prototype.savePreferences = function(cb) {
      var prefs,
        _this = this;
      prefs = {};
      $("#settings input.preference").each(function(i, el) {
        return prefs[$(el).attr('id')] = $(el).attr('value');
      });
      console.log(prefs);
      return this.storage.save("preferences", prefs, cb);
    };

    Settings.prototype.loadColors = function(cb) {
      var _this = this;
      return this.storage.get("colors", function(err, colors) {
        var c, _i, _len, _ref;
        if ((colors != null ? colors.rgb : void 0) != null) {
          _ref = colors.rgb;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            $("#colors").append($("<li>").css("background-color", _this.CSSColorFromArray(c)));
          }
        }
        return cb(null, colors);
      });
    };

    return Settings;

  })();

  window.Settings = Settings;

}).call(this);
