// Generated by CoffeeScript 1.3.3

/*
  The Storage interface aims to be compatible with all of these
  - localStorage
  - in-memory objects
  - cloud-based database APIs
*/


(function() {
  var CouchStorage, LocalStorage, Storage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Storage = (function() {

    function Storage() {}

    Storage.prototype.get = function(id, cb) {};

    Storage.prototype.save = function(id, doc, cb) {};

    Storage.prototype.remove = function(id, cb) {
      return this.save(id, null, cb);
    };

    return Storage;

  })();

  LocalStorage = (function(_super) {

    __extends(LocalStorage, _super);

    function LocalStorage() {
      return LocalStorage.__super__.constructor.apply(this, arguments);
    }

    LocalStorage.prototype.get = function(id, cb) {
      var doc, s;
      s = localStorage.getItem(id);
      doc = null;
      if (s !== null) {
        doc = JSON.parse(s);
      }
      return window.setTimeout(function() {
        return cb(null, doc);
      }, 10);
    };

    LocalStorage.prototype.save = function(id, doc, cb) {
      localStorage.setItem(id, doc !== null ? JSON.stringify(doc) : null);
      return window.setTimeout(function() {
        return cb(null);
      }, 10);
    };

    return LocalStorage;

  })(Storage);

  CouchStorage = (function(_super) {

    __extends(CouchStorage, _super);

    function CouchStorage(serverUrl, dbname) {
      this.serverUrl = serverUrl;
      this.dbname = dbname;
      $.couch.urlPrefix = this.serverUrl;
    }

    CouchStorage.prototype.get = function(id, cb) {
      var _this = this;
      return $.couch.db(this.dbname).openDoc(id, {
        success: function(doc) {
          var a, name, _ref;
          if (doc._attachments != null) {
            _ref = doc._attachments;
            for (name in _ref) {
              if (!__hasProp.call(_ref, name)) continue;
              a = _ref[name];
              doc[name] = "" + _this.serverUrl + "/" + _this.dbname + "/" + id + "/" + name;
            }
          }
          console.log("get returns", doc);
          return cb(null, doc);
        },
        error: function(status) {
          if (status === 404 || status === '404') {
            return cb(null, null);
          } else {
            return cb(status);
          }
        }
      });
    };

    CouchStorage.prototype.replaceBlobs = function(id, oldDoc, doc, cb) {
      var content_type, encoding, k, meta, newDoc, scheme, v, _ref;
      newDoc = {
        _attachments: (oldDoc != null ? oldDoc._attachments : void 0) || {}
      };
      for (k in newDoc._attachments) {
        if (!(k in doc) || !(doc[k] != null)) {
          newDoc._attachments[k] = null;
        }
      }
      for (k in doc) {
        if (!__hasProp.call(doc, k)) continue;
        v = doc[k];
        if (typeof v === 'string' && v.substr(0, 5) === 'data:') {
          meta = v.substr(0, v.indexOf(','));
          _ref = meta.split(/[:;]/g), scheme = _ref[0], content_type = _ref[1], encoding = _ref[2];
          if (encoding === !"base64") {
            return cb("createInlineAttachments: encoding is not base64!");
          }
          newDoc._attachments[k] = {
            content_type: content_type,
            data: v.substr(meta.length + 1)
          };
        } else {
          newDoc[k] = v;
        }
      }
      return cb(null, newDoc);
    };

    CouchStorage.prototype.save = function(id, doc, cb) {
      var _this = this;
      console.log("saving " + id);
      return this.get(id, function(err, oldDoc) {
        console.log('oldDoc', oldDoc);
        return _this.replaceBlobs(id, oldDoc, doc, function(err, newDoc) {
          if (err != null) {
            return cb(err);
          }
          if (oldDoc != null) {
            newDoc._rev = oldDoc._rev;
          }
          newDoc._id = id;
          console.log("writing:", newDoc);
          return $.couch.db(_this.dbname).saveDoc(newDoc, {
            success: function(data) {
              return cb(null, data);
            },
            error: function(status) {
              return cb(status);
            }
          });
        });
      });
    };

    return CouchStorage;

  })(Storage);

  window.LocalStorage = LocalStorage;

  window.CouchStorage = CouchStorage;

}).call(this);
