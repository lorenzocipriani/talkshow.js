// Generated by CoffeeScript 1.3.3

/*
  The Storage interface aims to be compatible with all of these
  - localStorage
  - in-memory objects
  - cloud-based database APIs
*/


(function() {
  var CouchStorage, LocalStorage, Storage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Storage = (function() {

    function Storage() {}

    Storage.prototype.get = function(id, cb) {};

    Storage.prototype.save = function(id, doc, cb) {};

    Storage.prototype.remove = function(id, cb) {
      return this.save(id, null, cb);
    };

    return Storage;

  })();

  LocalStorage = (function(_super) {

    __extends(LocalStorage, _super);

    function LocalStorage() {
      return LocalStorage.__super__.constructor.apply(this, arguments);
    }

    LocalStorage.prototype.get = function(id, cb) {
      var doc, s;
      s = localStorage.getItem(id);
      doc = null;
      if (s !== null) {
        doc = JSON.parse(s);
      }
      return window.setTimeout(function() {
        return cb(null, doc);
      }, 10);
    };

    LocalStorage.prototype.save = function(id, doc, cb) {
      localStorage.setItem(id, doc !== null ? JSON.stringify(doc) : null);
      return window.setTimeout(function() {
        return cb(null);
      }, 10);
    };

    return LocalStorage;

  })(Storage);

  CouchStorage = (function(_super) {

    __extends(CouchStorage, _super);

    function CouchStorage(serverUrl, dbname) {
      this.dbname = dbname;
      $.couch.urlPrefix = serverUrl;
    }

    CouchStorage.prototype.get = function(id, cb) {
      return $.couch.db(this.dbname).openDoc(id, {
        success: function(data) {
          return cb(null, data);
        },
        error: function(status) {
          if (status === 404 || status === '404') {
            return cb(null, null);
          } else {
            return cb(status);
          }
        }
      });
    };

    CouchStorage.prototype.save = function(id, doc, cb) {
      var _this = this;
      return this.get(id, function(err, data) {
        if (data != null ? data._rev : void 0) {
          doc._rev = data._rev;
        }
        doc._id = id;
        return $.couch.db(_this.dbname).saveDoc(doc, {
          success: function(data) {
            return cb(null, data);
          },
          error: function(status) {
            return cb(status);
          }
        });
      });
    };

    return CouchStorage;

  })(Storage);

  window.LocalStorage = LocalStorage;

  window.CouchStorage = CouchStorage;

}).call(this);
