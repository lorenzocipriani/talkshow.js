// Generated by CoffeeScript 1.3.3

/*
  The Storage interface aims to be compatible with all of these
  - localStorage
  - in-memory objects
  - cloud-based database APIs
*/


(function() {
  var CouchStorage, FileStorage, LocalStorage, Storage, StorageFactory,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Storage = (function() {

    function Storage() {}

    Storage.prototype.get = function(id, cb) {};

    Storage.prototype.save = function(id, doc, cb) {};

    Storage.prototype.remove = function(id, cb) {
      return this.save(id, null, cb);
    };

    Storage.prototype.toString = function() {
      return "unkown Storage";
    };

    return Storage;

  })();

  LocalStorage = (function(_super) {

    __extends(LocalStorage, _super);

    function LocalStorage(cb) {
      cb(null, this);
    }

    LocalStorage.prototype.toString = function() {
      return "HTML5 LocalStorage";
    };

    LocalStorage.prototype.get = function(id, cb) {
      var doc, s;
      s = localStorage.getItem(id);
      doc = null;
      if (s !== null) {
        doc = JSON.parse(s);
      }
      return cb(null, doc);
    };

    LocalStorage.prototype.save = function(id, doc, cb) {
      localStorage.setItem(id, doc !== null ? JSON.stringify(doc) : null);
      return cb(null);
    };

    return LocalStorage;

  })(Storage);

  CouchStorage = (function(_super) {

    __extends(CouchStorage, _super);

    function CouchStorage(serverUrl, dbname, cb) {
      var _this = this;
      this.serverUrl = serverUrl;
      this.dbname = dbname;
      $.couch.urlPrefix = this.serverUrl;
      $.couch.db(this.dbname).info({
        success: function(data) {
          return cb(null, _this);
        },
        error: function(err) {
          return cb(err, null);
        }
      });
    }

    CouchStorage.prototype.toString = function() {
      return "CouchDB at " + this.serverUrl + "/" + this.dbname;
    };

    CouchStorage.prototype.get = function(id, cb) {
      return this._get(id, function(err, doc) {
        var cleanDoc, k, v;
        if (err != null) {
          return cb(err);
        }
        cleanDoc = {};
        for (k in doc) {
          if (!__hasProp.call(doc, k)) continue;
          v = doc[k];
          if (k.substr(0, 1) === "_") {
            continue;
          }
          cleanDoc[k] = doc[k];
        }
        return cb(null, cleanDoc);
      });
    };

    CouchStorage.prototype._get = function(id, cb) {
      var _this = this;
      return $.couch.db(this.dbname).openDoc(id, {
        success: function(doc) {
          var link, name, _ref;
          doc = _.clone(doc);
          if (doc._attachments != null) {
            _ref = doc._attachments;
            for (name in _ref) {
              if (!__hasProp.call(_ref, name)) continue;
              link = "" + _this.serverUrl + "/" + _this.dbname + "/" + id + "/" + name;
              doc[name] = link;
            }
          }
          return cb(null, doc);
        },
        error: function(status) {
          if (status === 404 || status === '404') {
            return cb(null, null);
          } else {
            return cb(status);
          }
        }
      });
    };

    CouchStorage.prototype.replaceBlobs = function(id, oldDoc, doc, cb) {
      var content_type, encoding, k, meta, newAtt, newDoc, scheme, v, _ref, _ref1;
      newDoc = {};
      newAtt = {};
      _ref = (oldDoc != null ? oldDoc._attachments : void 0) || {};
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        if (doc[k] !== null) {
          newAtt[k] = oldDoc._attachments[k];
        }
      }
      newDoc._attachments = newAtt;
      for (k in doc) {
        if (!__hasProp.call(doc, k)) continue;
        v = doc[k];
        if (typeof v === 'string' && v.substr(0, 5) === 'data:') {
          meta = v.substr(0, v.indexOf(','));
          _ref1 = meta.split(/[:;]/g), scheme = _ref1[0], content_type = _ref1[1], encoding = _ref1[2];
          if (encoding === !"base64") {
            return cb("createInlineAttachments: encoding is not base64!");
          }
          newDoc._attachments[k] = {
            content_type: content_type,
            data: v.substr(meta.length + 1)
          };
        } else {
          if (v !== null && k !== "_attachments") {
            newDoc[k] = v;
          }
        }
      }
      return cb(null, newDoc);
    };

    CouchStorage.prototype.save = function(id, doc, cb) {
      var _this = this;
      return this._get(id, function(err, oldDoc) {
        return _this.replaceBlobs(id, oldDoc, doc, function(err, newDoc) {
          if (err != null) {
            return cb(err);
          }
          if (oldDoc != null) {
            newDoc._rev = oldDoc._rev;
          }
          newDoc._id = id;
          return $.couch.db(_this.dbname).saveDoc(newDoc, {
            success: function(data) {
              return cb(null, data);
            },
            error: function(status) {
              return cb(status);
            }
          });
        });
      });
    };

    return CouchStorage;

  })(Storage);

  FileStorage = (function(_super) {

    __extends(FileStorage, _super);

    function FileStorage(filename, cb) {
      var _this = this;
      this.filename = filename;
      $.ajax({
        url: this.filename,
        dataType: "text",
        success: function(data) {
          console.log(data);
          _this.data = JSON.parse(data);
          if (_this.data.root != null) {
            return cb(null, _this);
          } else {
            return cb("no root found", null);
          }
        },
        error: function(xhr, textStatus, err) {
          return cb(err, null);
        }
      });
    }

    FileStorage.prototype.toString = function() {
      return "File " + this.filename;
    };

    FileStorage.prototype.get = function(id, cb) {
      return cb(null, this.data[id]);
    };

    FileStorage.prototype.save = function(id, doc, cb) {
      this.data[id] = doc;
      return cb(null);
    };

    return FileStorage;

  })(Storage);

  StorageFactory = (function() {

    function StorageFactory() {}

    StorageFactory.prototype.getBestStorage = function(cb) {
      var errors,
        _this = this;
      errors = {};
      return async.parallel([
        function(cb) {
          return new CouchStorage('http://localhost:5984', 'talkshow', function(err, result) {
            errors.CouchStorage = err;
            return cb(null, result);
          });
        }, function(cb) {
          return new FileStorage('content.json', function(err, result) {
            errors.FileStorage = err;
            return cb(null, result);
          });
        }, function(cb) {
          return new LocalStorage(function(err, result) {
            errors.LocalStorage = err;
            return cb(null, result);
          });
        }
      ], function(err, results) {
        var x, _i, _len;
        console.log(errors);
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          x = results[_i];
          if (x != null) {
            return cb(null, x);
          }
        }
        return cb(errors);
      });
    };

    return StorageFactory;

  })();

  window.LocalStorage = LocalStorage;

  window.CouchStorage = CouchStorage;

  window.FileStorage = FileStorage;

  window.StorageFactory = StorageFactory;

}).call(this);
