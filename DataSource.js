// Generated by CoffeeScript 1.3.3
(function() {
  var DataSource;

  DataSource = (function() {

    function DataSource(grid, level, nodeId, parent, position) {
      var cellDelegate, _ref, _ref1, _ref2,
        _this = this;
      this.grid = grid;
      this.level = level;
      this.nodeId = nodeId;
      this.parent = parent;
      this.position = position;
      if ((_ref = this.level) == null) {
        this.level = 1;
      }
      this.cells = {};
      this.children = {};
      if (this.nodeId != null) {
        this.cells = (_ref1 = JSON.parse(localStorage.getItem("node_" + this.nodeId + "_cells"))) != null ? _ref1 : {};
        this.children = (_ref2 = JSON.parse(localStorage.getItem("node_" + this.nodeId + "_children"))) != null ? _ref2 : {};
      }
      cellDelegate = {
        labelTextChanged: function(cell, text) {
          console.log("labelTextChanged", cell, text);
          return _this.save(cell, "label", text);
        },
        imageChanged: function(cell, role, dataUri) {
          return _this.save(cell, role, dataUri);
        },
        cellChanged: function(cell) {
          return _this.save(cell, "cell");
        }
      };
      this.factory = new CellFactory(cellDelegate);
    }

    DataSource.prototype.setChild = function(pos, id) {
      this.children["" + pos.x + "/" + pos.y] = id;
      this.ensureNodeId();
      return localStorage.setItem("node_" + this.nodeId + "_children", JSON.stringify(this.children));
    };

    DataSource.prototype.ensureNodeId = function() {
      if (!(this.nodeId != null)) {
        this.nodeId = window.uniqueId();
        if (this.parent != null) {
          return this.parent.setChild(this.position, this.nodeId);
        } else {
          console.log("root nodeId is " + this.nodeId);
          return localStorage.setItem("root", this.nodeId);
        }
      }
    };

    DataSource.prototype.save = function(cell, aspect, data) {
      var id, obj, row, x, y;
      if (aspect === "id") {
        row = cell.closest("tr");
        x = cell.index();
        y = row.index();
        id = cell.attr("id");
        this.cells["" + x + "/" + y] = id;
        console.log("cell " + x + "/" + y + " changed id: " + id);
        this.ensureNodeId();
        return localStorage.setItem("node_" + this.nodeId + "_cells", JSON.stringify(this.cells));
      } else {
        id = cell.attr("id");
        if (!(id != null)) {
          id = window.uniqueId();
          cell.attr("id", id);
          this.save(cell, "id");
        }
        console.log("saving " + id + " " + aspect);
        obj = localStorage.getItem("cell_" + id);
        if (obj === null) {
          obj = {};
        } else {
          obj = JSON.parse(obj);
        }
        obj[aspect] = data;
        console.dir(obj);
        obj = JSON.stringify(obj);
        return localStorage.setItem("cell_" + id, obj);
      }
    };

    DataSource.prototype.colorForCell = function(x, y) {
      var color, index;
      index = x + y * 4 % 6 + 1;
      color = index.toString(2);
      color = "000".substr(0, 3 - color.length) + color;
      color = color.replace(/1/g, "255,").replace(/0/g, "112,");
      color += ".3";
      color = "rgba(" + color + ")";
      return color;
    };

    DataSource.prototype.cellData = function(x, y) {
      var id, key, obj, ret;
      ret = {};
      key = "" + x + "/" + y;
      if (key in this.cells) {
        id = this.cells[key];
        obj = JSON.parse(localStorage.getItem("cell_" + id));
        if (obj != null) {
          ret = obj;
        }
        ret.id = id;
      }
      if (!("label" in ret)) {
        ret.label = "level" + this.level + "(#" + this.nodeId + "): " + x + "/" + y;
      }
      return ret;
    };

    DataSource.prototype.labelForCell = function(x, y) {
      var obj;
      obj = cellData(x, y);
      return obj.label;
    };

    DataSource.prototype.enterCell = function(x, y) {
      var key, nodeId, _ref;
      console.log("entering cell " + x + "/" + y);
      nodeId = null;
      if (this.children) {
        key = "" + x + "/" + y;
        if (key in this.children) {
          nodeId = this.children[key];
        }
      }
      console.log("nodeId", nodeId);
      return (_ref = this.delegate) != null ? _ref.enteredCell(this, {
        x: x,
        y: y
      }, this.level + 1, nodeId) : void 0;
    };

    DataSource.prototype.cellForPosition = function(x, y) {
      var cell, color, data,
        _this = this;
      data = this.cellData(x, y);
      color = this.colorForCell(x, y);
      cell = this.factory.makeCell(data, color);
      if ("id" in data) {
        cell.attr("id", data.id);
      }
      cell.click(function() {
        return _this.enterCell(x, y);
      });
      return cell;
    };

    return DataSource;

  })();

  window.DataSource = DataSource;

}).call(this);
