// Generated by CoffeeScript 1.3.3
(function() {
  var DataSource;

  DataSource = (function() {

    function DataSource(args, cb) {
      var _ref,
        _this = this;
      this.grid = args.grid, this.level = args.level, this.nodeId = args.nodeId, this.parent = args.parent, this.position = args.position, this.delegate = args.delegate, this.storage = args.storage;
      if ((_ref = this.level) == null) {
        this.level = 1;
      }
      this.cells = {};
      this.children = {};
      this.factory = new CellFactory({
        labelTextChanged: function(cell, text, cb) {
          console.log("labelTextChanged", cell, text);
          return _this.save(cell, "label", text, cb);
        },
        contentChanged: function(cell, aspect, dataUri, cb) {
          return _this.save(cell, aspect, dataUri, cb);
        },
        cellChanged: function(cell, cb) {
          return _this.save(cell, "cell", cb);
        }
      });
      this.initialize(cb);
    }

    DataSource.prototype.initialize = function(cb) {
      var _this = this;
      if (this.nodeId != null) {
        return async.parallel([
          function(cb) {
            return _this.storage.get("node_" + _this.nodeId + "_cells", cb);
          }, function(cb) {
            return _this.storage.get("node_" + _this.nodeId + "_children", cb);
          }
        ], function(err, results) {
          var _ref, _ref1;
          if (err != null) {
            return cb(err);
          }
          _this.cells = results[0], _this.children = results[1];
          if ((_ref = _this.cells) == null) {
            _this.cells = {};
          }
          if ((_ref1 = _this.children) == null) {
            _this.children = {};
          }
          return cb(null, _this);
        });
      } else {
        return cb(null, this);
      }
    };

    DataSource.prototype.setChild = function(pos, id, cb) {
      var _this = this;
      this.children["" + pos.x + "/" + pos.y] = id;
      return this.ensureNodeId(function(err) {
        if (err != null) {
          return cb(err);
        }
        localStorage.setItem("node_" + _this.nodeId + "_children", JSON.stringify(_this.children));
        return cb(null);
      });
    };

    DataSource.prototype.ensureNodeId = function(cb) {
      var _this = this;
      if (!(this.nodeId != null)) {
        return window.uniqueId(function(err, id) {
          if (err) {
            return cb(err);
          }
          _this.nodeId = id;
          if (_this.parent != null) {
            return _this.parent.setChild(_this.position, id, cb);
          } else {
            console.log("root nodeId is " + _this.nodeId);
            return _this.storage.save("root", {
              value: _this.nodeId
            }, cb);
          }
        });
      } else {
        return cb(null);
      }
    };

    DataSource.prototype.setCellId = function(cell, id, cb) {
      var row, x, y,
        _this = this;
      row = cell.closest("tr");
      x = cell.index();
      y = row.index();
      cell.attr("id", id);
      this.cells["" + x + "/" + y] = id;
      console.log("cell " + x + "/" + y + " changed id: " + id);
      return this.ensureNodeId(function(err) {
        if (!(_this.nodeId != null)) {
          alert("No nodeId after ensureNodeId");
        }
        if (err != null) {
          return cb(err);
        }
        localStorage.setItem("node_" + _this.nodeId + "_cells", JSON.stringify(_this.cells));
        return cb(null);
      });
    };

    DataSource.prototype.ensureCellId = function(cell, cb) {
      var id,
        _this = this;
      console.log("ensureCellId");
      id = cell.attr("id");
      if (id != null) {
        return cb(null);
      }
      console.log("calling uniqueId");
      return window.uniqueId(function(err, id) {
        console.log("uniqueId returned " + err + ", " + id);
        if (err != null) {
          return cb(err);
        }
        return _this.setCellId(cell, id, cb);
      });
    };

    DataSource.prototype.save = function(cell, aspect, data, cb) {
      var _this = this;
      return this.ensureCellId(cell, function(err) {
        var id;
        if (err != null) {
          return cb(err);
        }
        id = cell.attr('id');
        console.log("saving " + aspect + " of cell " + id);
        return _this.storage.get("cell_" + id, function(err, obj) {
          if (err != null) {
            return cb(err);
          }
          if (obj === null) {
            obj = {};
          }
          obj[aspect] = data;
          return _this.storage.save("cell_" + id, obj, cb);
        });
      });
    };

    DataSource.prototype.colorForCell = function(x, y) {
      var color, index;
      index = x + y * 4 % 6 + 1;
      color = index.toString(2);
      color = "000".substr(0, 3 - color.length) + color;
      color = color.replace(/1/g, "255,").replace(/0/g, "112,");
      color += ".3";
      color = "rgba(" + color + ")";
      return color;
    };

    DataSource.prototype.cellData = function(x, y) {
      var id, key, obj, ret;
      ret = {};
      key = "" + x + "/" + y;
      if (key in this.cells) {
        id = this.cells[key];
        obj = JSON.parse(localStorage.getItem("cell_" + id));
        if (obj != null) {
          ret = obj;
        }
        ret.id = id;
      }
      if (!("label" in ret)) {
        ret.label = "level" + this.level + "(#" + this.nodeId + "): " + x + "/" + y;
      }
      return ret;
    };

    DataSource.prototype.enterCell = function(x, y, cb) {
      var audioPlayer, childNodeId, data, imagePlayer, key;
      console.log("entering cell " + x + "/" + y);
      childNodeId = null;
      if (this.children) {
        key = "" + x + "/" + y;
        if (key in this.children) {
          childNodeId = this.children[key];
        }
      }
      console.log("nodeId", childNodeId);
      if (childNodeId === null) {
        data = this.cellData(x, y);
        if (data.sound) {
          audioPlayer = new AudioPlayer(data.sound);
          return;
        }
        if (data.photo) {
          imagePlayer = new ImagePlayer(data.photo);
          return;
        }
      }
      if (this.delegate != null) {
        return this.delegate.enteredCell(this, {
          x: x,
          y: y
        }, this.level + 1, childNodeId, cb);
      } else {
        return cb(null);
      }
    };

    DataSource.prototype.cellForPosition = function(x, y) {
      var cell, color, data,
        _this = this;
      data = this.cellData(x, y);
      color = this.colorForCell(x, y);
      cell = this.factory.makeCell(data, color);
      if ("id" in data) {
        cell.attr("id", data.id);
      }
      cell.click(function() {
        return _this.enterCell(x, y, function() {});
      });
      return cell;
    };

    return DataSource;

  })();

  window.DataSource = DataSource;

}).call(this);
