// Generated by CoffeeScript 1.3.3
(function() {
  var Talkshow, setupUIDGenerator;

  setupUIDGenerator = function(storage, cb) {
    return storage.get("currId", function(err, doc) {
      var currId;
      currId = (doc != null ? doc.value : void 0) || 0;
      window.uniqueId = function(cb) {
        var ret;
        ret = currId;
        currId++;
        return storage.save("currId", {
          value: currId
        }, function(err) {
          return cb(err, ret);
        });
      };
      return cb(err);
    });
  };

  Talkshow = (function() {

    Talkshow.prototype["export"] = function(exporterName, cb) {
      var exporter;
      exporter = new ZIPExporter;
      return exporter["export"](this.storage, cb);
    };

    function Talkshow(accessibilityMode, cb) {
      var _this = this;
      this.accessibilityMode = accessibilityMode;
      new StorageFactory().getBestStorage(function(err, result) {
        var grid;
        if (err != null) {
          return cb(err);
        }
        _this.storage = result;
        grid = new Grid(4, 2);
        _this.navigationController = new NavigationController(grid);
        return async.parallel([
          function(cb) {
            return setupUIDGenerator(_this.storage, function(err) {
              if (err != null) {
                return cb("Failed to initialize UIDGenerator " + err);
              }
              return cb(null, null);
            });
          }, function(cb) {
            return _this.storage.get("root", cb);
          }, function(cb) {
            return new Settings(_this.storage, cb);
          }
        ], function(err, _arg) {
          var ignored, rootDoc, rootNodeId, settings;
          ignored = _arg[0], rootDoc = _arg[1], settings = _arg[2];
          if (err != null) {
            return cb(err);
          }
          rootNodeId = (rootDoc != null ? rootDoc.value : void 0) || null;
          console.log("rootNodeId", rootNodeId);
          return _this.accessibilityMode.initializeDataSource({
            delegate: _this,
            grid: grid,
            storage: _this.storage,
            nodeId: rootNodeId
          }, function(err, newDataSource) {
            if (err != null) {
              return cb(err);
            }
            newDataSource.navTitle = "Home";
            return _this.navigationController.push(newDataSource, function() {
              var keyboardInput;
              keyboardInput = KeyboardInput.get(_this);
              return cb(null, _this);
            });
          });
        });
      });
    }

    Talkshow.prototype.enterCell = function(x, y, cb) {
      return this.navigationController.currentController().enterCell(x, y, cb);
    };

    Talkshow.prototype.pop = function(cb) {
      var _this = this;
      if (this.navigationController.count() > 1) {
        return this.navigationController.pop(function() {
          var myDataSource;
          myDataSource = _this.navigationController.currentController();
          $('#navBar').html(myDataSource.navTitle);
          return cb(null);
        });
      } else {
        return cb(null);
      }
    };

    Talkshow.prototype.enteredCell = function(dataSource, position, level, nodeId, cellData, cb) {
      var _this = this;
      console.log("enteredCell " + position.x + "/" + position.y + " level: " + level + " nodeId: " + nodeId + " of data source " + dataSource.navTitle);
      return this.accessibilityMode.makeDataSource({
        delegate: this,
        grid: this.grid,
        storage: this.storage,
        parent: dataSource,
        position: position,
        level: level,
        nodeId: nodeId,
        cellData: cellData
      }, function(err, newDataSource) {
        if (err != null) {
          return cb(err);
        }
        newDataSource.navTitle = ">";
        if (((dataSource != null ? dataSource.navTitle : void 0) != null) && ((cellData != null ? cellData.label : void 0) != null)) {
          newDataSource.navTitle = dataSource.navTitle + " / " + cellData.label;
        }
        $('#navBar').html(newDataSource.navTitle);
        return _this.navigationController.push(newDataSource, function() {
          return cb(null);
        });
      });
    };

    return Talkshow;

  })();

  window.Talkshow = Talkshow;

}).call(this);
